pragma solidity ^0.5.0;

// Import contracts from other directories
import "../sojacore/Ownable.sol";
import "../sojaaccesscontrol/FarmerRole.sol";
import "../sojaaccesscontrol/DistributorRole.sol";
import "../sojaaccesscontrol/RetailerRole.sol";
import "../sojaaccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, FarmerRole, DistributorRole, RetailerRole, ConsumerRole {

  // Define 'owner'
  // address owner;

  // Define a variable called 'gtin' for Universal Product Code (GTIN)
  uint  gtin;

  // Define a variable called 'id' for Stock Keeping Unit (ID)
  uint  id;

  // Define a public mapping 'items' that maps the GTIN to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the GTIN to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    id;  // Stock Keeping Unit (ID)
    uint    gtin; // Universal Product Code (GTIN), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address payable originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originWeight; // Farm Latitude
    string  originDesignation;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of gtin + id
    string  productName; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'gtin' as input argument
  event Harvested(uint gtin);
  event Processed(uint gtin);
  event Packed(uint gtin);
  event ForSale(uint gtin);
  event Sold(uint gtin);
  event Shipped(uint gtin);
  event Received(uint gtin);
  event Purchased(uint gtin);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  // modifier onlyOwner() {
  //   require(msg.sender == owner);
  //   _;
  // }

  // Define a modifer that verifies the Caller
  modifier verifyCaller(address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _gtin) {
    _;
    uint _price = items[_gtin].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_gtin].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a gtin is Harvested
  modifier harvested(uint _gtin) {
    require(items[_gtin].itemState == State.Harvested);
    _;
  }

  // Define a modifier that checks if an item.state of a gtin is Processed
  modifier processed(uint _gtin) {
    require(items[_gtin].itemState == State.Processed);
    _;
  }
  
  // Define a modifier that checks if an item.state of a gtin is Packed
  modifier packed(uint _gtin) {
    require(items[_gtin].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a gtin is ForSale
  modifier forSale(uint _gtin) {
    require(items[_gtin].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a gtin is Sold
  modifier sold(uint _gtin) {
    require(items[_gtin].itemState == State.Sold);
    _;
  }
  
  // Define a modifier that checks if an item.state of a gtin is Shipped
  modifier shipped(uint _gtin) {
    require(items[_gtin].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a gtin is Received
  modifier received(uint _gtin) {
    require(items[_gtin].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a gtin is Purchased
  modifier purchased(uint _gtin) {
    require(items[_gtin].itemState == State.Purchased);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'id' to 1
  // and set 'gtin' to 1
  constructor() public payable {
    id = 1;
    gtin = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner()) {
      selfdestruct(msg.sender);
    }
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(
    uint _gtin,
    address payable _originFarmerID,
    string memory _originFarmName,
    string memory _originFarmInformation,
    string memory _originWeight,
    string memory _originDesignation,
    string memory _productName
    )
     public
     onlyFarmer
      {
    // Add the new item as part of Harvest
    items[_gtin].id = id;
    items[_gtin].gtin = gtin;
    items[_gtin].itemState = State.Harvested;
    items[_gtin].ownerID = _originFarmerID;
    items[_gtin].originFarmerID = _originFarmerID;
    items[_gtin].originFarmName = _originFarmName;
    items[_gtin].originFarmInformation = _originFarmInformation;
    items[_gtin].originWeight = _originWeight;
    items[_gtin].originDesignation = _originDesignation;
    items[_gtin].productID = id + gtin;
    items[_gtin].productName = _productName;

    // Increment id
    id = id + 1;
    // Emit the appropriate event
    emit Harvested(_gtin);
    
  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function processItem(uint _gtin) public onlyFarmer
  // Call modifier to check if gtin has passed previous supply chain stage
  harvested(_gtin)
  // Call modifier to verify caller of this function
  verifyCaller(items[_gtin].originFarmerID)
  {
    // Update the appropriate fields
    items[_gtin].itemState = State.Processed;
    // Emit the appropriate event
    emit Processed(_gtin);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _gtin) onlyFarmer public 
  // Call modifier to check if gtin has passed previous supply chain stage
  processed(_gtin)
  // Call modifier to verify caller of this function
  verifyCaller(items[_gtin].originFarmerID)
  {
    // Update the appropriate fields
    items[_gtin].itemState = State.Packed;
    // Emit the appropriate event
    emit Packed(_gtin);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _gtin, uint _price) onlyFarmer public 
  // Call modifier to check if gtin has passed previous supply chain stage
  packed(_gtin)
  // Call modifier to verify caller of this function
  verifyCaller(items[_gtin].originFarmerID)
  {
    // Update the appropriate fields
    items[_gtin].itemState = State.ForSale;
    items[_gtin].productPrice = _price;
    // Emit the appropriate event
    emit ForSale(_gtin);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _gtin) onlyDistributor public payable 
    // Call modifier to check if gtin has passed previous supply chain stage
    forSale(_gtin)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_gtin].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(_gtin)
    {
    
    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_gtin].itemState = State.Sold;
    items[_gtin].ownerID = msg.sender;
    items[_gtin].distributorID = msg.sender;
    // Transfer money to farmer
    items[_gtin].originFarmerID.transfer(items[_gtin].productPrice);
    // emit the appropriate event
    emit Sold(_gtin);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _gtin) onlyDistributor public 
    // Call modifier to check if gtin has passed previous supply chain stage
    sold(_gtin)
    // Call modifier to verify caller of this function
    verifyCaller(items[_gtin].distributorID)
    {
    // Update the appropriate fields
    items[_gtin].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_gtin);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _gtin) public 
    // Call modifier to check if gtin has passed previous supply chain stage
    shipped(_gtin)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyRetailer()
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_gtin].itemState = State.Received;
    items[_gtin].ownerID = msg.sender;
    items[_gtin].retailerID = msg.sender;
    // Emit the appropriate event
    emit Received(_gtin);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _gtin) public 
    // Call modifier to check if gtin has passed previous supply chain stage
    received(_gtin)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyConsumer()
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    items[_gtin].itemState = State.Purchased;
    items[_gtin].ownerID = msg.sender;
    items[_gtin].consumerID = msg.sender;
    // Emit the appropriate event
    emit Purchased(_gtin);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _gtin) public view returns 
  (
  uint    itemID,
  uint    itemGTIN,
  address ownerID,
  address originFarmerID,
  string memory originFarmName,
  string memory originFarmInformation,
  string memory originWeight,
  string memory originDesignation
  ) 
  {
  // Assign values to the 8 parameters
  itemID = items[_gtin].id;
  itemGTIN = items[_gtin].gtin;
  ownerID = items[_gtin].ownerID;
  originFarmerID = items[_gtin].originFarmerID;
  originFarmName = items[_gtin].originFarmName;
  originFarmInformation = items[_gtin].originFarmInformation;
  originWeight = items[_gtin].originWeight;
  originDesignation = items[_gtin].originDesignation;
    
  return 
  (
  itemID,
  itemGTIN,
  ownerID,
  originFarmerID,
  originFarmName,
  originFarmInformation,
  originWeight,
  originDesignation
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _gtin) public view returns 
  (
  uint    itemID,
  uint    itemGTIN,
  uint    productID,
  string memory productName,
  uint    productPrice,
  State   itemState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
  itemID = items[_gtin].id;
  itemGTIN = items[_gtin].gtin;
  productID = items[_gtin].productID;
  productName = items[_gtin].productName;
  productPrice = items[_gtin].productPrice;
  itemState = items[_gtin].itemState;
  distributorID = items[_gtin].distributorID;
  retailerID = items[_gtin].retailerID;
  consumerID = items[_gtin].consumerID;
    
  return 
  (
  itemID,
  itemGTIN,
  productID,
  productName,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
